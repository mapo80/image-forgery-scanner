@page "/"

@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Analisi immagine</PageTitle>

<Form Model="@model" OnFinish="Analyze">
    <Card Title="Caricamento immagine" Style="margin-bottom:16px">
        <Row Gutter="16">
            <Col Span="24">
                <FormItem Required Name="Image">
                    <LabelTemplate>@BuildLabel("Immagine", "Seleziona la foto da esaminare")</LabelTemplate>
                    <ChildContent>
                        <Microsoft.AspNetCore.Components.Forms.InputFile OnChange="OnFileChange" />
                    </ChildContent>
                </FormItem>
            </Col>
        </Row>
    </Card>

    <Card Title="Controllo ELA" Style="margin-bottom:16px">
        <p>Analizza i livelli di errore di compressione per rilevare aree sospette.</p>
        <Row Gutter="16">
            <Col Span="12">
                <FormItem Required Name="ElaQuality">
                    <LabelTemplate>@BuildLabel("Qualità ELA", "Valore JPEG con cui viene ricompressa l'immagine.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.InputNumber @bind-Value="model.ElaQuality" Min="1" Max="100" />
                    </ChildContent>
                </FormItem>
            </Col>
        </Row>
    </Card>

    <Card Title="Controllo Copy-Move" Style="margin-bottom:16px">
        <p>Individua regioni duplicate tramite confronti di feature.</p>
        <Row Gutter="16">
            <Col Span="12">
                <FormItem Required Name="CopyMoveFeatureCount">
                    <LabelTemplate>@BuildLabel("Feature", "Numero massimo di feature da estrarre.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.InputNumber @bind-Value="model.CopyMoveFeatureCount" Min="1" />
                    </ChildContent>
                </FormItem>
            </Col>
            <Col Span="12">
                <FormItem Required Name="CopyMoveMatchDistance">
                    <LabelTemplate>@BuildLabel("Distanza", "Soglia di matching tra feature.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.InputNumber @bind-Value="model.CopyMoveMatchDistance" Step="0.1" />
                    </ChildContent>
                </FormItem>
            </Col>
        </Row>
        <Row Gutter="16">
            <Col Span="12">
                <FormItem Required Name="CopyMoveRansacReproj">
                    <LabelTemplate>@BuildLabel("RANSAC reproj", "Errore massimo di riproiezione RANSAC.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.InputNumber @bind-Value="model.CopyMoveRansacReproj" Step="0.1" />
                    </ChildContent>
                </FormItem>
            </Col>
            <Col Span="12">
                <FormItem Required Name="CopyMoveRansacProb">
                    <LabelTemplate>@BuildLabel("RANSAC prob", "Probabilità di successo dell'algoritmo RANSAC.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.InputNumber @bind-Value="model.CopyMoveRansacProb" Step="0.01" />
                    </ChildContent>
                </FormItem>
            </Col>
        </Row>
    </Card>

    <Card Title="Controllo Splicing" Style="margin-bottom:16px">
        <p>Analizza inserimenti di porzioni provenienti da altre immagini.</p>
        <Row Gutter="16">
            <Col Span="12">
                <FormItem Required Name="SplicingInputWidth">
                    <LabelTemplate>@BuildLabel("Larghezza", "Larghezza della rete di ingresso.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.InputNumber @bind-Value="model.SplicingInputWidth" />
                    </ChildContent>
                </FormItem>
            </Col>
            <Col Span="12">
                <FormItem Required Name="SplicingInputHeight">
                    <LabelTemplate>@BuildLabel("Altezza", "Altezza della rete di ingresso.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.InputNumber @bind-Value="model.SplicingInputHeight" />
                    </ChildContent>
                </FormItem>
            </Col>
        </Row>
    </Card>

    <Card Title="Controllo Noiseprint" Style="margin-bottom:16px">
        <p>Rileva manipolazioni basandosi sulle impronte di rumore del sensore.</p>
        <Row Gutter="16">
            <Col Span="12">
                <FormItem Required Name="NoiseprintInputSize">
                    <LabelTemplate>@BuildLabel("Dimensione", "Lato dell'immagine elaborata dal modello Noiseprint.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.InputNumber @bind-Value="model.NoiseprintInputSize" />
                    </ChildContent>
                </FormItem>
            </Col>
        </Row>
    </Card>

    <Card Title="Metadati" Style="margin-bottom:16px">
        <p>Verifica coerenza dei tag EXIF.</p>
        <Row Gutter="16">
            <Col Span="12">
                <FormItem Required Name="ExpectedCameraModels">
                    <LabelTemplate>@BuildLabel("Modelli attesi", "Elenco di modelli di fotocamera ammessi, separati da virgola.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.Input @bind-Value="model.ExpectedCameraModels" />
                    </ChildContent>
                </FormItem>
            </Col>
        </Row>
    </Card>

    <Card Title="Pesi decisionali" Style="margin-bottom:16px">
        <p>Pesi utilizzati per combinare i punteggi dei singoli controlli.</p>
        <Row Gutter="16">
            <Col Span="12">
                <FormItem Required Name="ElaWeight">
                    <LabelTemplate>@BuildLabel("ELA", "Peso assegnato al controllo ELA.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.InputNumber @bind-Value="model.ElaWeight" Step="0.1" />
                    </ChildContent>
                </FormItem>
            </Col>
            <Col Span="12">
                <FormItem Required Name="CopyMoveWeight">
                    <LabelTemplate>@BuildLabel("Copy-Move", "Peso assegnato al controllo Copy-Move.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.InputNumber @bind-Value="model.CopyMoveWeight" Step="0.1" />
                    </ChildContent>
                </FormItem>
            </Col>
        </Row>
        <Row Gutter="16">
            <Col Span="12">
                <FormItem Required Name="SplicingWeight">
                    <LabelTemplate>@BuildLabel("Splicing", "Peso assegnato al controllo Splicing.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.InputNumber @bind-Value="model.SplicingWeight" Step="0.1" />
                    </ChildContent>
                </FormItem>
            </Col>
            <Col Span="12">
                <FormItem Required Name="InpaintingWeight">
                    <LabelTemplate>@BuildLabel("Inpainting", "Peso assegnato al controllo Inpainting.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.InputNumber @bind-Value="model.InpaintingWeight" Step="0.1" />
                    </ChildContent>
                </FormItem>
            </Col>
        </Row>
        <Row Gutter="16">
            <Col Span="12">
                <FormItem Required Name="ExifWeight">
                    <LabelTemplate>@BuildLabel("EXIF", "Peso assegnato al controllo Metadati.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.InputNumber @bind-Value="model.ExifWeight" Step="0.1" />
                    </ChildContent>
                </FormItem>
            </Col>
        </Row>
    </Card>

    <Card Title="Soglie verdetto" Style="margin-bottom:16px">
        <p>Valori limite che separano i diversi esiti.</p>
        <Row Gutter="16">
            <Col Span="12">
                <FormItem Required Name="CleanThreshold">
                    <LabelTemplate>@BuildLabel("Clean", "Soglia massima per considerare l'immagine pulita.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.InputNumber @bind-Value="model.CleanThreshold" Step="0.01" />
                    </ChildContent>
                </FormItem>
            </Col>
            <Col Span="12">
                <FormItem Required Name="TamperedThreshold">
                    <LabelTemplate>@BuildLabel("Tampered", "Soglia minima oltre la quale l'immagine è manomessa.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.InputNumber @bind-Value="model.TamperedThreshold" Step="0.01" />
                    </ChildContent>
                </FormItem>
            </Col>
        </Row>
    </Card>

    <Card Title="Impostazioni generali" Style="margin-bottom:16px">
        <p>Configurazioni comuni a tutta l'analisi.</p>
        <Row Gutter="16">
            <Col Span="12">
                <FormItem Required Name="EnabledChecks">
                    <LabelTemplate>@BuildLabel("Controlli", "Elenco di controlli abilitati (ela,copymove,splicing,inpainting,exif)")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.Input @bind-Value="model.EnabledChecks" />
                    </ChildContent>
                </FormItem>
            </Col>
            <Col Span="12">
                <FormItem Required Name="MaxParallelChecks">
                    <LabelTemplate>@BuildLabel("Parallelo", "Numero massimo di controlli in parallelo.")</LabelTemplate>
                    <ChildContent>
                        <AntDesign.InputNumber @bind-Value="model.MaxParallelChecks" Min="1" />
                    </ChildContent>
                </FormItem>
            </Col>
        </Row>
    </Card>

    <FormItem>
        <ChildContent>
            <AntDesign.Button Type="@AntDesign.ButtonType.Primary" HtmlType="submit">Analizza</AntDesign.Button>
        </ChildContent>
    </FormItem>
</Form>

@if (result != null)
{
    <Statistic Title="Punteggio finale" Value="@result.TotalScore" Precision="2" />
    <p>Il punteggio finale è la combinazione ponderata dei punteggi parziali:
        <ul>
            <li>ELA (@result.ElaScore) × @model.ElaWeight</li>
            <li>Copy-Move (@result.CopyMoveScore) × @model.CopyMoveWeight</li>
            <li>Splicing (@result.SplicingScore) × @model.SplicingWeight</li>
            <li>Inpainting (@result.InpaintingScore) × @model.InpaintingWeight</li>
            <li>EXIF (@result.ExifScore) × @model.ExifWeight</li>
        </ul>
    </p>
    <Collapse>
        <CollapsePanel Header="ELA">
            <Table TItem="InfoRow" DataSource="ElaTable">
                <Column TItem="InfoRow" Title="Parametro" Field="@nameof(InfoRow.Nome)" />
                <Column TItem="InfoRow" Title="Valore" Field="@nameof(InfoRow.Valore)" />
            </Table>
            <AntDesign.Image Src="@( "data:image/png;base64," + elaMap)" Width="100%" />
        </CollapsePanel>
        <CollapsePanel Header="Copy-Move">
            <Table TItem="InfoRow" DataSource="CopyMoveTable">
                <Column TItem="InfoRow" Title="Parametro" Field="@nameof(InfoRow.Nome)" />
                <Column TItem="InfoRow" Title="Valore" Field="@nameof(InfoRow.Valore)" />
            </Table>
            <AntDesign.Image Src="@( "data:image/png;base64," + copyMoveMap)" Width="100%" />
        </CollapsePanel>
        <CollapsePanel Header="Splicing">
            <Table TItem="InfoRow" DataSource="SplicingTable">
                <Column TItem="InfoRow" Title="Parametro" Field="@nameof(InfoRow.Nome)" />
                <Column TItem="InfoRow" Title="Valore" Field="@nameof(InfoRow.Valore)" />
            </Table>
            <AntDesign.Image Src="@( "data:image/png;base64," + splicingMap)" Width="100%" />
        </CollapsePanel>
        <CollapsePanel Header="Inpainting">
            <Table TItem="InfoRow" DataSource="InpaintingTable">
                <Column TItem="InfoRow" Title="Parametro" Field="@nameof(InfoRow.Nome)" />
                <Column TItem="InfoRow" Title="Valore" Field="@nameof(InfoRow.Valore)" />
            </Table>
            <AntDesign.Image Src="@( "data:image/png;base64," + inpaintingMap)" Width="100%" />
        </CollapsePanel>
        <CollapsePanel Header="EXIF">
            <Table TItem="InfoRow" DataSource="ExifTable">
                <Column TItem="InfoRow" Title="Tag" Field="@nameof(InfoRow.Nome)" />
                <Column TItem="InfoRow" Title="Dettaglio" Field="@nameof(InfoRow.Valore)" />
            </Table>
        </CollapsePanel>
    </Collapse>
}

@code {
    private AnalyzeImageOptionsForm model = new();
    private AnalyzeImageResult? result;
    private Microsoft.AspNetCore.Components.Forms.IBrowserFile? image;
    private string? elaMap;
    private string? copyMoveMap;
    private string? splicingMap;
    private string? inpaintingMap;

    protected override void OnInitialized()
    {
        Http.BaseAddress = new Uri(Navigation.BaseUri);
    }

    private void OnFileChange(Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs e) => image = e.File;

    private RenderFragment BuildLabel(string text, string tip) => builder =>
    {
        builder.OpenElement(0, "span");
        builder.AddContent(1, text + " ");
        builder.OpenComponent<Tooltip>(2);
        builder.AddAttribute(3, "Title", tip);
        builder.AddAttribute(4, "ChildContent", (RenderFragment)(b =>
        {
            b.OpenComponent<AntDesign.Icon>(5);
            b.AddAttribute(6, "Type", "info-circle");
            b.CloseComponent();
        }));
        builder.CloseComponent();
        builder.CloseElement();
    };

    private InfoRow[] ElaTable => new[] { new InfoRow("Punteggio", result?.ElaScore.ToString("F2") ?? "") };
    private InfoRow[] CopyMoveTable => new[] { new InfoRow("Punteggio", result?.CopyMoveScore.ToString("F2") ?? "") };
    private InfoRow[] SplicingTable => new[] { new InfoRow("Punteggio", result?.SplicingScore.ToString("F2") ?? "") };
    private InfoRow[] InpaintingTable => new[] { new InfoRow("Punteggio", result?.InpaintingScore.ToString("F2") ?? "") };
    private InfoRow[] ExifTable => result?.ExifAnomalies.Select(kv => new InfoRow(kv.Key, kv.Value ?? string.Empty)).ToArray() ?? Array.Empty<InfoRow>();

    private async Task Analyze()
    {
        if (image == null)
            return;

        using var content = new MultipartFormDataContent();
        content.Add(new StreamContent(image.OpenReadStream(long.MaxValue)), "image", image.Name);

        var opts = model.ToOptions();
        content.Add(new StringContent(opts.ElaQuality.ToString(System.Globalization.CultureInfo.InvariantCulture)), nameof(opts.ElaQuality));
        content.Add(new StringContent(opts.CopyMoveFeatureCount.ToString()), nameof(opts.CopyMoveFeatureCount));
        content.Add(new StringContent(opts.CopyMoveMatchDistance.ToString(System.Globalization.CultureInfo.InvariantCulture)), nameof(opts.CopyMoveMatchDistance));
        content.Add(new StringContent(opts.CopyMoveRansacReproj.ToString(System.Globalization.CultureInfo.InvariantCulture)), nameof(opts.CopyMoveRansacReproj));
        content.Add(new StringContent(opts.CopyMoveRansacProb.ToString(System.Globalization.CultureInfo.InvariantCulture)), nameof(opts.CopyMoveRansacProb));
        content.Add(new StringContent(opts.SplicingInputWidth.ToString()), nameof(opts.SplicingInputWidth));
        content.Add(new StringContent(opts.SplicingInputHeight.ToString()), nameof(opts.SplicingInputHeight));
        content.Add(new StringContent(opts.NoiseprintInputSize.ToString()), nameof(opts.NoiseprintInputSize));
        foreach (var m in opts.ExpectedCameraModels)
            content.Add(new StringContent(m), nameof(opts.ExpectedCameraModels));
        content.Add(new StringContent(opts.ElaWeight.ToString(System.Globalization.CultureInfo.InvariantCulture)), nameof(opts.ElaWeight));
        content.Add(new StringContent(opts.CopyMoveWeight.ToString(System.Globalization.CultureInfo.InvariantCulture)), nameof(opts.CopyMoveWeight));
        content.Add(new StringContent(opts.SplicingWeight.ToString(System.Globalization.CultureInfo.InvariantCulture)), nameof(opts.SplicingWeight));
        content.Add(new StringContent(opts.InpaintingWeight.ToString(System.Globalization.CultureInfo.InvariantCulture)), nameof(opts.InpaintingWeight));
        content.Add(new StringContent(opts.ExifWeight.ToString(System.Globalization.CultureInfo.InvariantCulture)), nameof(opts.ExifWeight));
        content.Add(new StringContent(opts.CleanThreshold.ToString(System.Globalization.CultureInfo.InvariantCulture)), nameof(opts.CleanThreshold));
        content.Add(new StringContent(opts.TamperedThreshold.ToString(System.Globalization.CultureInfo.InvariantCulture)), nameof(opts.TamperedThreshold));
        content.Add(new StringContent(((int)opts.EnabledChecks).ToString()), nameof(opts.EnabledChecks));
        content.Add(new StringContent(opts.MaxParallelChecks.ToString()), nameof(opts.MaxParallelChecks));

        var response = await Http.PostAsync("/analyze", content);
        if (response.IsSuccessStatusCode)
        {
            result = await response.Content.ReadFromJsonAsync<AnalyzeImageResult>();
            elaMap = Convert.ToBase64String(result!.ElaMap);
            copyMoveMap = Convert.ToBase64String(result.CopyMoveMask);
            splicingMap = Convert.ToBase64String(result.SplicingMap);
            inpaintingMap = Convert.ToBase64String(result.InpaintingMap);
        }
    }

    private record AnalyzeImageOptionsForm
    {
        [Required] public int ElaQuality { get; set; } = 75;
        [Required] public int CopyMoveFeatureCount { get; set; } = 5000;
        [Required] public double CopyMoveMatchDistance { get; set; } = 3.0;
        [Required] public double CopyMoveRansacReproj { get; set; } = 3.0;
        [Required] public double CopyMoveRansacProb { get; set; } = 0.99;
        [Required] public int SplicingInputWidth { get; set; } = 256;
        [Required] public int SplicingInputHeight { get; set; } = 256;
        [Required] public int NoiseprintInputSize { get; set; } = 320;
        [Required] public string ExpectedCameraModels { get; set; } = "Canon EOS 80D,Nikon D850";
        [Required] public double ElaWeight { get; set; } = 1.0;
        [Required] public double CopyMoveWeight { get; set; } = 1.0;
        [Required] public double SplicingWeight { get; set; } = 1.0;
        [Required] public double InpaintingWeight { get; set; } = 1.0;
        [Required] public double ExifWeight { get; set; } = 1.0;
        [Required] public double CleanThreshold { get; set; } = 0.2;
        [Required] public double TamperedThreshold { get; set; } = 0.8;
        [Required] public int MaxParallelChecks { get; set; } = 1;
        [Required] public string EnabledChecks { get; set; } = "Ela,CopyMove,Splicing,Inpainting,Exif";

        public AnalyzeImageOptions ToOptions()
        {
            var enabled = EnabledChecks.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                                       .Aggregate(ForensicsCheck.None, (a, c) => a | Enum.Parse<ForensicsCheck>(c, true));
            return new AnalyzeImageOptions
            {
                ElaQuality = ElaQuality,
                CopyMoveFeatureCount = CopyMoveFeatureCount,
                CopyMoveMatchDistance = CopyMoveMatchDistance,
                CopyMoveRansacReproj = CopyMoveRansacReproj,
                CopyMoveRansacProb = CopyMoveRansacProb,
                SplicingInputWidth = SplicingInputWidth,
                SplicingInputHeight = SplicingInputHeight,
                NoiseprintInputSize = NoiseprintInputSize,
                ExpectedCameraModels = ExpectedCameraModels.Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries),
                ElaWeight = ElaWeight,
                CopyMoveWeight = CopyMoveWeight,
                SplicingWeight = SplicingWeight,
                InpaintingWeight = InpaintingWeight,
                ExifWeight = ExifWeight,
                CleanThreshold = CleanThreshold,
                TamperedThreshold = TamperedThreshold,
                EnabledChecks = enabled,
                MaxParallelChecks = MaxParallelChecks
            };
        }
    }

    private record InfoRow(string Nome, string Valore);
}
